# This is the master profile for building a bootable base system.  It is based
# on Linux From Scratch, <http://linuxfromscratch.org/>.

name="Bootable Base System"
version="0.02"
homepage="http://developer.berlios.de/projects/lfs-prometheus/"

# Individual packages may be logged.  We don't want to log them twice.
log_install=no

# New system's root filesystem.
make_root_fs=yes	# Create a root filesystem for new system.
mkfs="mke2fs -j -O dir_index,filetype,has_journal,sparse_super"
mount_root_fs=yes	# Ensure new system's root filesystem is mounted.
root_device="/dev/hda1"	# Device containing new system's root filesystem.
root_fs="/mnt/lfs"	# Where new system will be built in host filesystem.

# User that builds the system.
build_group=lfs
build_user=lfs

# These locations override the prometheus.conf values, and must be on the new
# system's filesystem.
build="/tools/build"	# Overrides builddir.
source="/tools/src"	# Overrides srcdir.

function install_pkg
{
	# Sanity checks.
	(( $(id -u) != 0 )) && error "${package}: must be installed as root"
	[[ -z "${root_fs}" ]] && error "${package}: root_fs not set"
	[[ -z "${build_group}" ]] && error "${package}: build_group not set"
	[[ -z "${build_user}" ]] && error "${package}: build_user not set"

	# Make new root filesystem if required.
	if [[ "${make_root_fs}" == "yes" ]]
	then
		[[ -z "${root_device}" ]] &&
		error "${package}: root_device not set"

		# Has a filesystem type been specified?
		if [[ -z "${mkfs}" ]]
		then
			warning "${package}: mkfs not set, assuming ext3fs"
			mkfs="mke2fs -j"
		fi

		echo "Creating root filesystem..."
		eval "${mkfs} \"${root_device}\"" ||
		error "${package}: cannot create root filesystem"
		mount_root_fs=force
	fi

	# Mount root filesystem if required.
	if [[ "${mount_root_fs}" == "yes" || "${mount_root_fs}" == "force" ]]
	then
		# Ensure mount point exists.
		mkdir -p "${root_fs}" ||
		error "${package}: cannot create mount point \`${root_fs}'"

		# Only mount if necessary.
		if [[ "${mount_root_fs}" == "force" ]] ||
		   ! mount | grep --quiet "${root_fs}"
		then
			if [[ -n "${root_device}" ]]
			then
				mount "${root_device}" "${root_fs}"

			# Or maybe there's an entry in /etc/fstab.
			elif grep --quiet "${root_fs}" /etc/fstab
			then
				mount "${root_fs}"
			else
				false
			fi || error "${package}: cannot mount \`${root_fs}'"
		fi
	fi

	# Add build user if necessary.
	if ! grep --quiet "^${build_user}:" /etc/passwd
	then
		# May need to add the build group too.
		if ! grep --quiet "^${build_group}:" /etc/group
		then
			groupadd "${build_group}" ||
			error "${package}: cannot add group \`${build_group}'"
		fi

		# Add build user & set password.
		useradd -c "Build User" -g "${build_group}" -m -k /dev/null \
		        -s /bin/bash "${build_user}" &&
		echo "Enter a password for ${build_user}:" &&
		passwd "${build_user}" ||
		error "${package}: cannot add user \`${build_user}'"
	fi

	# Create directories needed for stages 0 & 1.
	mkdir -p "${root_fs}"/{tools,"${build}","${source}"} &&
	chown "${build_user}:${build_group}" \
	      "${root_fs}"/{tools,"${build}","${source}"} ||
	error "${package}: cannot make directories needed for stages 0 & 1"

	# Create the /tools symbolic link.
	ln -fs "${root_fs}/tools" / ||
	error "${package}: cannot make \`/tools' => \`${root_fs}/tools' symlink"

	# Stage 0.
	root_fs="${root_fs}" build="${build}" \
	su "${build_user}" -c "pkgadd --config='${config}' --stage=0"

	# Stage 1.
	root_fs="${root_fs}" build="${build}" source="${source}" \
	su "${build_user}" -c "pkgadd --config='${config}' --stage=1"

	# Remove the /tools symbolic link, which is not needed any more.
	rm /tools

	# Stage 2.
	chroot "${root_fs}" /tools/bin/env -i HOME=/root TERM="${TERM}" \
		PATH="/sbin:/bin:/usr/sbin:/usr/bin:/tools/bin" \
		pkgadd --config="/tools/etc/prometheus.conf" --stage=2
}
