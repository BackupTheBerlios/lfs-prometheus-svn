#! /bin/bash

# pkgunpack package source extractor & patch applier
# Copyright (C) 2003-2004 Oliver Brakmann <obrakmann@gmx.net> &
# Gareth Jones <gareth_jones@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# Global prometheus functions.
source "%LIBPROMETHEUS%" || exit 1

# Usage: usage
# Print help text.
function usage {
	cat <<-EOF
Usage:
${0##*/} [<options>] <package_list>

For each package on the command line, extract the source code from its source
archives and apply the relevent patches.

Options (must precede package list):
-c, --config <config_file>	Specify alternative configuration file
-s, --stage <stage_number>	Specify stage 0, 1 or 2 (default = 2)
--				Treat remaining arguments as packages

-h, -?, --help			Show this help screen
-v, --version			Show version information

	EOF
	finish
}

# Usage: unpack_archives
# Unpack archives listed in $archives in appropriate directories.
function unpack_archives {
	local archive dir
	local -i i
	for (( i=0 ; i<${#archives[@]} ; ++i )); do

		# Substitute  $directory for `@d' & stop if archive & those
		# following should not be unpacked.
		dir="${archive_dirs[$i]//@d/$directory}"
		[[ "$dir" == ":" ]] && break

		# Set default directory.
		[[ -z "$dir" ]] && dir="$builddir"

		# Locate & unpack archive.
		archive=$(location_of "${archives[$i]}") &&
		[[ -n "$archive" ]] &&
		pushd "$dir" > /dev/null &&
		unpack "$archive" &&
		popd > /dev/null ||
		error "cannot unpack ${archives[$i]} in $dir"
	done
}

# Usage: apply_patches
# Apply patches listed in $patches with appropriate commands.
function apply_patches {
	local patch cmd
	local -i i
	for (( i=0 ; i<${#patches[@]} ; ++i )); do

		# Substitute $directory for `@d' & stop if patch & those
		# following should not be applied.
		cmd="${patch_cmds[$i]//@d/$directory}"
		[[ "$cmd" == ":" ]] && break

		# Set default command.
		[[ -z "$cmd" ]] && cmd="patch -Np1"

		# Locate & apply patch.
		patch=$(location_of "${patches[$i]}") &&
		[[ -n "$patch" ]] &&
		pushd "$directory" > /dev/null &&
		cat_file "$patch" | log $cmd &&
		pipestat &&
		popd > /dev/null ||
		error "cannot apply ${patches[$i]}"
	done
}

# --------------------------- START EXECUTION HERE --------------------------- #

# Check for options.
while [[ "$1" == -* ]]; do
	case "$1" in
		(-c|--config)			config="$2"
						shift ;;

		(--config=*)			config="${1#--config=}" ;;

		(-h|-\?|--help)			usage ;;

		(-s|--stage)			set_stage "$2"
						shift ;;

		(--stage=*)			set_stage "${1#--stage=}" ;;

		(-v|--version)			version ;;

		(--)				shift
						break ;;

		(*)		script_usage_err "unrecognized option: $1"
	esac
	shift
done

# The remaining arguments should all be packages.
(( $# == 0 )) && script_usage_err "no packages to unpack"

source_config

# If there is more than one package, unpack each in its own instance.
if (( $# > 1 )); then
	for package in "$@"; do
		"$0" --config="$config" --stage=$stage "$package" ||
		error "failed to unpack $package"
	done
	finish
fi

# There is only one package to unpack.  Do so in this instance.
profiles_cwd=yes
open_package "$1"

unpack_archives &&
apply_patches

finish
