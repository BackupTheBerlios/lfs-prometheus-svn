#! /bin/bash

# pkginstall package installer
# Copyright (C) 2003-2005 Oliver Brakmann <oliverbrakmann@users.berlios.de> &
# Gareth Jones <gareth_jones@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# Global prometheus functions.
source "%LIBPROMETHEUS%" || exit 1

# Usage: usage
# Print help text.
function usage {
	cat <<-EOF
Usage:
${0##*/} [<options>] <package_list>

Install packages from their build directories, in the order given on the
commandline.

Options (must precede package list):
-b, --backup-installed		Backup and remove any existing installations
-c, --config <config_file>	Specify alternative configuration file
-l, --leave-installed		Do not touch any existing installations
-L, --leave-failed		Leave files from any failed installations
-o, --overwrite-installed	Overwrite any existing installations
-r, --remove-installed		Remove any existing installations
-R, --remove-failed		Cleanup files from any failed installations
-s, --stage <stage_number>	Specify stage 0, 1 or 2 (default = 2)
--				Treat remaining arguments as packages

-h, -?, --help			Show this help screen
-V, --version			Show version information

	EOF
	finish
}

# Usage: remove_installed
# Deal with any existing installation of $package.
function remove_installed {

	# Return if not already installed.
	pkginfo "$package" | grep "not installed" > /dev/null && return

	# Get version of installed $package.
	installed_version="$(source_profile inst ${package}; echo $version)"
	installed_name="$name${installed_version:+ $installed_version}"

	# $installed wasn't set on the command line.  Go interactive.
	if [[ -z "$installed" ]]; then
		echo "$installed_name is already installed."
		echo -n "Abort installation? [y/n] "
		choice && installed=leave
	fi

	# User wants to continue installation.
	if [[ -z "$installed" ]]; then
		echo "Do you want to remove currently installed $installed_name"
		echo -n "prior to installation? [y/n] "
		choice && installed=remove

		# Maybe they want to backup the existing installation before
		# removing it.
		if [[ "$installed" == remove ]]; then
			echo "Do you want to create a backup of the current"
			echo -n "$installed_name installation? [y/n] "
			choice && installed=backup
		fi
	fi

	# User wants an overwrite.
	[[ -z "$installed" ]] && installed=overwrite

	# What to do.
	case $installed in
		(leave)		error "$installed_name already installed" ;;

		(remove)	pkgrm --force "$package" ;;

		(backup)	pkgrm --backup --force "$package" &&
				backed_up=yes ;;

		(overwrite)	log_warning "overwriting $installed_name"
	esac
}

# Usage: finish_install
# Run install-log, collect meta data and update info and man-page db's.
function finish_install {

	# Run install-log & clean up.
	if [[ "$log_install" == yes ]]; then
		install -m644 -o prometheus -g prometheus "$profile" \
			~prometheus/installed/profiles/

		if install-log --force "$package"; then
			rm -f ~prometheus/installed/indices/"$package" 2> /dev/null
			install -m644 -o prometheus -g prometheus /dev/null \
				~prometheus/installed/indices/"$package"

			# Convert the install-log log file to the reroot format.
			local f
			while read f; do
				echo -n "created	false	"
				stat "$f" | \
				sed -n 's@.*(\(.*\)/.*( *\(.*\)/.*( *\(.*\)/.*$@\1	\2	\3	@p' | \
				sed "s@\$@$f@"
			done < "${logdir}/${package}" >> ~prometheus/installed/indices/"$package"

			rm "${logdir}/${package}"
		else
			error "running install-log failed"
		fi

		(( stage == 2 )) && sync_system

		# Release lock.
		rm "$timestamp" || error "releasing lock failed"
	fi
}

# Usage: cleanup_failed
# Uninstall any files installed by a failed installation.
function cleanup_failed {

	# $failed wasn't set on the command line.  Go interactive.
	if [[ -z "$failed" ]]; then
		echo "Do you want clean up the failed installation of"
		echo -n "$name? [y/n] "
		choice && failed=remove
	fi

	[[ "$failed" == remove ]] && pkgrm --force "$package" &&

	# Did we backup a previous install?  If so, restore it & related
	# install-log files.
	if [[ "$backed_up" == yes ]]; then
		echo "Restoring backup of $installed_name..."
		tar xjf ~prometheus/backup/"${package}".tar.bz2 ||
		failure "restoring backup failed"
	fi
}

# --------------------------- START EXECUTION HERE --------------------------- #

unset backed_up failed installed installed_name installed_version package_list

# Check for options.
while [[ "$1" == -* ]]; do
	case "$1" in
		(-b|--backup-installed)		installed=backup ;;

		(-c|--config)			config="$2"
						shift ;;

		(--config=*)			config="${1#--config=}" ;;

		(-h|-\?|--help)			usage ;;

		(-l|--leave-installed)		installed=leave ;;

		(-L|--leave-failed)		failed=leave ;;

		(-o|--overwrite-installed)	installed=overwrite ;;

		(-r|--remove-installed)		installed=remove ;;

		(-R|--remove-failed)		failed=remove ;;

		(-s|--stage)			set_stage "$2"
						shift ;;

		(--stage=*)			set_stage "${1#--stage=}" ;;

		(-V|--version)			version ;;

		(--)				shift
						break ;;

		(*)		script_usage_err "unrecognized option: \`$1'"
	esac
	shift
done

# The remaining arguments should all be packages.
(( $# == 0 )) && script_usage_err "no packages to install"

# Remove duplicate packages from parameter list.
package_list=( "$@" )
remove_dupes package_list

source_config

# If there is more than one package, install each in its own instance.
if (( ${#package_list[@]} > 1 )); then
	for package in "${package_list[@]}"; do
		"$0" --config="$config" ${installed:+--$installed-installed} \
		     ${failed:+--$failed-failed} --stage=$stage "$package" ||
		error "installation of \`$package' failed"
	done
	finish
fi

# There is only one package to install.  Do so in this instance.
open_package "${package_list[0]}"

# Check we know how to install package.
if is_func install_pkg; then

	# Ensure we the have necessary privileges, (optionally) remove any
	# existing installation of $package & initialize install-log.
	get_privileges $@
	remove_installed

	# Run the install commands from the package's profile. finish_install
	# must be run even if we fail, so capture the return value for later.
	cd "$directory" || error "cannot enter \`$directory'"
	log install_pkg
	declare -i retval=$?

	# Run install-log.
	finish_install

	# Clean up if the install failed.
	if (( retval != 0 )); then
		failure "installation of $name_ver failed"
		cleanup_failed
	fi

else

	# No commands for installing package!
	warning "no install_pkg function in \`$profile'"
	error "cannot install $name_ver"
fi

finish
