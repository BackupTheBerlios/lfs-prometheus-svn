#! /bin/bash

# pkgcheck package build checker
# Copyright (C) 2003-2004 Oliver Brakmann <oliverbrakmann@users.berlios.de> &
# Gareth Jones <gareth_jones@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# Global prometheus functions.
source "%LIBPROMETHEUS%" || exit 1

# Usage: usage
# Print help text.
function usage {
	cat <<-EOF
Usage:
${0##*/} [<options>] <package_list>

Run packages' testsuites in the order given on the commandline.

Options (must precede package list):
-c, --config <config_file>	Specify alternative configuration file
-s, --stage <stage_number>	Specify stage 0, 1 or 2 (default = 2)
--				Treat remaining arguments as packages

-h, -?, --help			Show this help screen
-V, --version			Show version information

	EOF
	finish
}

# --------------------------- START EXECUTION HERE --------------------------- #

unset package_list

# Check for options.
while [[ "$1" == -* ]]; do
	case "$1" in
		(-c|--config)			config="$2"
						shift ;;

		(--config=*)			config="${1#--config=}" ;;

		(-h|-\?|--help)			usage ;;

		(-s|--stage)			set_stage "$2"
						shift ;;

		(--stage=*)			set_stage "${1#--stage=}" ;;

		(-V|--version)			version ;;

		(--)				shift
						break ;;

		(*)		script_usage_err "unrecognized option: \`$1'"
	esac
	shift
done

# The remaining arguments should all be packages.
(( $# == 0 )) && script_usage_err "no packages to check"

# Remove duplicate packages from parameter list.
package_list=( "$@" )
remove_dupes package_list

source_config

# If there is more than one package, check each in its own instance.
if (( ${#package_list[@]} > 1 )); then
	for package in "${package_list[@]}"; do
		"$0" --config="$config" --stage=$stage "$package" ||
		error "\`$package' testsuite failed"
	done
	finish
fi

# There is only one package to check.  Do so in this instance.
profiles_cwd=yes
open_package "${package_list[0]}"

# Only run check if told to.
if [[ "$check" == yes ]]; then

	# If we have check commands, run them in the package's source directory.
	if is_func check_pkg; then
		cd "$directory" &&
		log check_pkg ||
		error "$name_ver testsuite failed"
	else

		# No commands for checking package.  Warn user but don't fail;
		# this is more likely a configuration error than a package
		# error.
		log_warning "no check_pkg function in \`$profile'"
		log_warning "skipped checks for $name_ver"
	fi
fi

finish
