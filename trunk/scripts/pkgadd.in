#! /bin/bash

# pkgadd package installer
# Copyright (C) 2003-2004 Oliver Brakmann <obrakmann@gmx.net> &
# Gareth Jones <gareth_jones@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# Global prometheus functions.
source "%LIBPROMETHEUS%" || exit 1

# Usage: usage
# Print help text.
function usage {
	cat <<-EOF
Usage:
${0##*/} [<options>] <package_list>

Install packages in the order given on the commandline.

Options (must precede package list):
-b, --backup-installed		Backup and remove any existing installations
-c, --config <config_file>	Specify alternative configuration file
-d, --download			Download files need to install packages
-D, --dependencies		Install any unfulfilled dependencies of packages
-l, --leave-installed		Do not touch any existing installations
-L, --leave-failed		Leave files from any failed installations
-o, --overwrite-installed	Overwrite any existing installations
-r, --remove-installed		Remove any existing installations
-R, --remove-failed		Cleanup files from any failed installations
-s, --stage <stage_number>	Specify stage 0, 1 or 2 (default = 2)
--				Treat remaining arguments as packages

-h, -?, --help			Show this help screen
-v, --version			Show version information

	EOF
	finish
}

# Usage: get_package_list <package_list>
# Fill $package_list with packages to install by checking dependencies of
# packages in <package_list>.
function get_package_list {
	[[ -z "$*" ]] && usage_error "get_package_list" "<package_list>"

	# Only do dependency checking in stage 2.
	if (( stage < 2 )); then
		package_list=( "$@" )
		return
	fi

	# Get array of dependencies for <package_list>.
	get_dependencies "$@"

	# Fill not_installed with missing dependencies.
	local -a not_installed
	local dep
	for dep in "${dependencies[@]}"; do
		pkginfo "$dep" | grep "not installed" > /dev/null &&
		not_installed[${#not_installed[@]}]="$dep"
	done

	# If user didn't request adding dependencies, ask.
	if [[ -n "${not_installed[*]}" && "$add_deps" != yes ]]; then
		echo "The following dependencies are unfulfilled:"
		echo "${not_installed[*]}"
		echo -n "Install these packages first? [y/n] "
		choice || error "unfulfilled dependencies - aborting"
	fi

	package_list=( "${not_installed[@]}" "$@" )
	remove_dupes package_list
}

# --------------------------- START EXECUTION HERE --------------------------- #

unset add_deps download failed installed package_list

# Check for options.
while [[ "$1" == -* ]]; do
	case "$1" in
		(-b|--backup-installed)		installed=backup ;;

		(-c|--config)			config="$2"
						shift ;;

		(-d|--download)			download=yes ;;

		(-D|--dependencies)		add_deps=yes ;;

		(--config=*)			config="${1#--config=}" ;;

		(-h|-\?|--help)			usage ;;

		(-l|--leave-installed)		installed=leave ;;

		(-L|--leave-failed)		failed=leave ;;

		(-o|--overwrite-installed)	installed=overwrite ;;

		(-r|--remove-installed)		installed=remove ;;

		(-R|--remove-failed)		failed=remove ;;

		(-s|--stage)			set_stage "$2"
						shift ;;

		(--stage=*)			set_stage "${1#--stage=}" ;;

		(-v|--version)			version ;;

		(--)				shift
						break ;;

		(*)		script_usage_err "unrecognized option: $1"
	esac
	shift
done

# The remaining arguments should all be packages.
(( $# == 0 )) && script_usage_err "no packages to install"

source_config

# Get the list of packages to install, including dependencies.
get_package_list "$@"

# Download packages if told to.
if [[ "$download" == yes ]]; then
	echo "Downloading needed files..."
	pkgget --config="$config" "${package_list[@]}" ||
	error "downloading failed"
fi

# If there is more than one package, install each in its own instance.
if (( ${#package_list[@]} > 1 )); then
	for package in "${package_list[@]}"; do
		"$0" --config="$config" ${installed:+--$installed-installed} \
		     ${failed:+--$failed-failed} --stage=$stage "$package" ||
		error "installation of $package failed"
	done
	finish
fi

# There is only one package to install.  Do so in this instance.
profiles_cwd=yes
open_package "${package_list[0]}"

log_echo
log_echo "	----- $name_ver -----"

log_echo
log_echo "Unarchiving & patching $name..."
pkgunpack --config="$config" --stage=$stage "$package" ||
error "unarchiving or patching $name failed"

if is_func build_pkg; then
	log_echo
	log_echo "Building $name..."
	pkgbuild --config="$config" --stage=$stage "$package" ||
	error "building $name failed"
fi

if [[ "$check" == yes ]]; then
	log_echo
	log_echo "Running $name checksuite..."
	pkgcheck --config="$config" --stage=$stage "$package" ||
	error "checksuite failed for $name"
fi

log_echo
log_echo "Installing $name..."
pkginstall --config="$config" ${installed:+--$installed-installed} \
	   ${failed:+--$failed-failed} --stage=$stage "$package" ||
error "installation of $name failed"

finish
