#! /bin/bash

# compact file compressor
# Copyright (C) 2003-2006 Oliver Brakmann <oliverbrakmann@users.berlios.de> &
# Gareth Jones <gareth_jones@users.berlios.de>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# FIXME: Cleanup on error.

# Global prometheus functions.
source "%LIBPROMETHEUS%" || exit 1

# Usage: usage
# Print help text.
function usage {
	cat <<-EOF
Usage:
${0##*/} [<options>] {<file> | <directory>} ...

Compress each file with both gzip and bzip2.  For each, keep the smallest of the
resulting files, including the original, and echo its name.  If two files are
the same size, the uncompressed file is kept in preference, followed by the
gzipped.  Already compressed files may be uncompressed.

Options (must precede files):

-b, --bz2, --bzip2	Only try bzip2 compression
-f, --force		Force compression even if uncompressed file smaller
-g, --gz, --gzip	Only try gzip compression
-r, --recompress	Recompress file even if already has desired compression
-R, --recursive		Recursively compact files within directories

-h, -?, --help		Show this help screen
-V, --version		Show version information
--			Treat remaining arguments as files/directories

	EOF
	finish
}

# Usage: largest_of <file> <file>
# Set the global variable $largest to the largest <file>.  If both <files>s are
# the same size, $largest is set to the second.
function largest_of {
	if (( $# != 2 )) || [[ -z "$1" || -z "$2" ]]; then
		usage_error "largest_of" "<file> <file>" "$*"
	fi

	if (( $(wc --bytes < "$1") > $(wc --bytes < "$2") )); then
		largest="$1"
	else
		largest="$2"
	fi
}

# Usage: compact_file <file>
# Compress <file> with gzip &/or bzip2.  Keep the smallest (including the
# original <file> if it is smaller), & optionally the original.
function compact_file {
	if (( $# != 1 )) || [[ -z "$1" ]]; then
		usage_error "compact_file" "<file>" "$*"
	fi

	# Check file readable.
	if ! [[ -f "$1" && -r "$1" ]]; then
		failure "cannot read \`$1'"
		return 1
	fi

	local file file_bz2 file_gz have_file have_bz2 have_gz

	# Get existing compression & work out filenames.  Sanitize compressed
	# archive filenames.
	local original="$1"
	local suffix=$(get_suffix "$original")
	case "${suffix##*.}" in
		(bz2)	file="${original%.bz2}"
			file_bz2="$original"
			file_gz="$file.gz"
			have_bz2=yes ;;

		(gz)	file="${original%.gz}"
			file_bz2="$file.bz2"
			file_gz="$original"
			have_gz=yes ;;

		(tbz*)	file="${original%.tbz*}.tar"
			file_bz2="$file.bz2"
			file_gz="$file.gz"
			have_bz2=yes
			if ! mv "$original" "$file_bz2"; then
				failure "cannot mv \`$original' to \`$file_bz2'"
				return 1
			fi ;;

		(tgz)	file="${original%.tgz}.tar"
			file_bz2="$file.bz2"
			file_gz="$file.gz"
			have_gz=yes
			if ! mv "$original" "$file_gz"; then
				failure "cannot mv \`$original' to \`$file_gz'"
				return 1
			fi ;;

		(*)	file="$original"
			file_bz2="$file.bz2"
			file_gz="$file.gz"
			have_file=yes
	esac

	# Do nothing cases.
	if [[ "$recompress" != yes ]]; then
		if [[ "$bzip2_only" == yes && "$have_bz2" == yes ]]; then
			echo "\`$file_bz2' already compressed with bzip2"
			return 0
		elif [[ "$gzip_only" == yes && "$have_gz" == yes ]]; then
			echo "\`$file_gz' already compressed with gzip"
			return 0
		fi
	fi

	# Get uncompressed file.
	if [[ "$have_file" != yes ]]; then
		[[ "$have_bz2" == yes ]] &&
		if ! bzcat "$file_bz2" > "$file"; then
			failure "could not uncompress \`$file_bz2'"
			return 1
		fi

		[[ "$have_gz" == yes ]] &&
		if ! zcat "$file_gz" > "$file"; then
			failure "could not uncompress \`$file_gz'"
			return 1
		fi

		have_file=yes
	fi

	# bzip2 compression.
	[[ "$gzip_only" != yes ]] &&
	if [[ "$have_bz2" != yes || "$recompress" == yes ]]; then
		[[ "$have_bz2" == yes ]] &&
		if ! rm "$file_bz2"; then
			failure "could not remove \`$file_bz2'"
			return 1
		fi

		if ! bzip2 -9k "$file"; then
			failure "running bzip2 on \`$file' failed"
			return 1
		fi

		have_bz2=yes

		# Delete bzip2ed file if bigger than original.
		if [[ "$bzip2_only" != yes || "$force" != yes ]]; then
			largest_of "$file" "$file_bz2"
			if [[ "$largest" == "$file_bz2" ]]; then
				rm "$file_bz2" ||
				failure "could not remove \`$file_bz2'"

				have_bz2=
			fi
		fi
	fi

	# gzip compression.
	[[ "$bzip2_only" != yes ]] &&
	if [[ "$have_gz" != yes || "$recompress" == yes ]]; then
		[[ "$have_gz" == yes ]] &&
		if ! rm "$file_gz"; then
			failure "could not remove \`$file_gz'"
			return 1
		fi

		if ! gzip - < "$file" > "$file_gz"; then
			failure "running gzip on \`$file' failed"
			return 1
		fi

		have_gz=yes

		# Delete gzipped file if bigger than original.
		if [[ "$gzip_only" != yes || "$force" != yes ]]; then
			largest_of "$file" "$file_gz"
			if [[ "$largest" == "$file_gz" ]]; then
				rm "$file_gz" ||
				failure "could not remove \`$file_gz'"

				have_gz=
			fi
		fi
	fi

	# Delete largest of gzipped & bzip2ed files if both present.
	if [[ "$bzip2_only" != yes && "$gzip_only" != yes && "$have_bz2" == yes
	      && "$have_gz" == yes ]]; then
		largest_of "$file_gz" "$file_bz2"
		if [[ "$largest" == "$file_gz" ]]; then
			have_gz=
		else
			have_bz2=
		fi
		rm "$largest" || failure "could not remove \`$largest'"
	fi

	# Ensure $remainder is set to the remaining compacted file, or null if
	# there is none.
	local remainder
	[[ "$have_gz" == yes ]] && remainder="$file_gz"
	[[ "$have_bz2" == yes ]] && remainder="$file_bz2"

	# Report compacted file.
	if [[ -n "$remainder" ]]; then
		echo "$original => $remainder"
		rm "$file" || failure "could not remove \`$file'"
	else

		# Original file is smaller than compacted.
		echo "\`$file' already smallest possible"
	fi
}

# Usage: compact_dir <directory>
# Compact files in <directory>.
function compact_dir {
	if (( $# != 1 )) || [[ -z "$1" ]]; then
		usage_error "compact_dir" "<directory>" "$*"
	fi

	local file
	for file in "$1"/*; do

		# Catch empty directory.
		[[ "${file##*/}" == "*" && ! -e "$file" ]] && break

		# If directory, call recursively.
		if [[ -d "$file" ]]; then
			compact_dir "$file"
		else
			compact_file "$file"
		fi
	done
}

# --------------------------- START EXECUTION HERE --------------------------- #

unset bzip2_only force gzip_only recompress recursive list

# Check for options.
while [[ "$1" == -* ]]; do
	case "$1" in
		(-b|--bz2|--bzip2)	bzip2_only=yes ;;

		(-f|--force)		force=yes ;;

		(-g|--gz|--gzip)	gzip_only=yes ;;

		(-h|-\?|--help)		usage ;;

		(-r|--recompress)	recompress=yes ;;

		(-R|--recursive)	recursive=yes ;;

		(-V|--version)		version ;;

		(--)			shift
					break ;;

		(*)		script_usage_err "unrecognized option: \`$1'"
	esac
	shift
done

# Check option sanity.
[[ "$force" == yes && "$bzip2_only" != yes && "$gzip_only" != yes ]] &&
script_usage_err "--force only valid with --bzip2 or --gzip"

# The remaining arguments should all be files to compact.
(( $# == 0 )) && script_usage_error "no files to compact"

# Remove duplicate files/directories from parameter list.
list=( "$@" )
remove_dupes list

# Compact files/directories from argument list.
for arg in "${list[@]}"; do

	# If directory, are we recursive?
	if [[ -d "$arg" ]]; then
		if [[ "$recursive" == yes ]]; then
			compact_dir "${arg%/}"
		else
			failure "\`$arg' is a directory"
		fi
	else
		compact_file "$arg"
	fi
done

finish
