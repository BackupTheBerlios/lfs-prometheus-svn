# This is the master profile for Linux From Scratch.

name="Linux From Scratch"
version="6.1"
homepage="http://linuxfromscratch.org/view/${version}/"
log_install=no

# LFS specific configuration.
lfs="/mnt/lfs"		# Host location where the LFS system will be built.
mount_lfs=yes		# Ensure $lfs is mounted.
lfs_device="/dev/hda1"	# This must already exist & contain a filesystem.
lfs_user="lfs"		# User to build stage 1 as.
lfs_grp="lfs"		# Group the $lfs_user belongs to.
lfs_builddir=/tools/build
			# Temporary location for the source trees to be built.
			# This _must_ be the same for stage0/1 and the chroot'ed
			# stage2 (ie. place it somewhere below /tools)!


function install_pkg {

	# Sanity checks.
	local lv=$(uname -r)
	lv=${lv%%-*}

#	FIXME: This breaks on Linux stable releases (2.6.x.y).
#	if [[ "${lv%.*}" == "2.6" ]]; then
#		(( "${lv##*.}" -lt 2 )) &&
#		error "$package: Minimum required kernel version to build LFS is 2.6.2."
#	else
#		error "$package: Minimum required kernel version to build LFS is 2.6.2."
#	fi

	[[ $(sed 's/.*(gcc version \(.*\)).*/\1/' /proc/version) < 3 ]] &&
		error "$package: Kernel needs to be compiled with gcc 3.0 or greater."

	(( $(id -u) != 0 )) && error "$package: must be run as root"
	[[ -z "$lfs" ]] && error "$package: lfs not set"
	[[ -z "$lfs_user" ]] && error "$package: lfs_user not set"

	# Should $lfs be mounted?
	if [[ "$mount_lfs" == yes ]]; then

		# Is it already mounted?
		mount | grep "$lfs" &> /dev/null ||
		if [[ -n "$lfs_device" ]]; then

			# Try to mount $lfs_device on $lfs.
			mount "$lfs_device" "$lfs"
		else

			# Maybe we have an entry in /etc/fstab.
			if grep "$lfs" /etc/fstab &> /dev/null; then
				mount "$lfs"
			else
				false
			fi
		fi || error "$package: could not mount $lfs"
	fi

	echo "Preparing stage 0..."

	# Add an lfs user and group if necessary.
	if ! getent group ${lfs_grp} >/dev/null 2>&1; then
		groupadd lfs ||
		error "${package}: could not add group: $lfs_grp"
	fi
	if ! getent passwd ${lfs_user} >/dev/null 2>&1; then
		useradd -s /bin/bash -m -k /dev/null -g lfs "$lfs_user" ||
		error "${package}: could not add user: $lfs_user"
	fi

	# Create directories needed to build stages 0 & 1.
	if [[ ! -d "${lfs}/tools" ]]; then
		[[ -e "${lfs}/tools" ]] && rm -f "${lfs}/tools"
		mkdir "${lfs}/tools"
	fi &&
	chown "$lfs_user" "${lfs}/tools" &&
	ln -sf "${lfs}/tools" / ||
	error "${package}: could not create ${lfs}/tools and /tools."

	if [[ ! -d "${lfs}${lfs_builddir}" ]]; then
		[[ ! -e "${lfs}${lfs_builddir}" ]] || rm -f "${lfs}${lfs_builddir}"
		mkdir -p "${lfs}${lfs_builddir}"
	fi &&
	chown -R "$lfs_user" "${lfs}${lfs_builddir}" ||
	error "${package}: could not create ${lfs}${lfs_builddir}."

	# Create the root filesystem directory tree.
	lfs="$lfs" lfs_builddir="$lfs_builddir" \
	%PKGADD% --config "$config" --stage=0 rootfs ||
	error "${package}: could not create root filesystem directory tree in $lfs"

	# Build stage 0.
	lfs="$lfs" lfs_builddir="$lfs_builddir" \
	su "$lfs_user" -c "%PKGADD% --config '$config' --stage=0 stage0" ||
	error "${package}: could not build stage 0"

	echo "Preparing stage 1..."

	# Build stage 1.
	lfs="$lfs" lfs_builddir="$lfs_builddir" \
	su "$lfs_user" -c "%PKGADD% --config '$config' --stage=1 stage1" ||
	error "${package}: could not build stage 1"


	# This is an ugly hack to install Prometheus into /tools and still
	# create the proper home directory within ${lfs}/var/lib/
	# (which needs root privs, which we don't have in stage1)
	lfs="$lfs" %PKGADD% --config "$config" --stage=1 prometheus
	lfs="$lfs" %PKGADD% --config "$config" --stage=1 users

	# Remove the /tools symlink.
	rm /tools

	echo "Preparing stage 2..."

	# Make sure package source is available in chroot.
	mount --bind "$srcdir" "${lfs}${srcdir}" ||
		error "${package}: could not bind $srcdir to ${lfs}${srcdir}"

	mount -t proc proc ${lfs}/proc
	mount -t sysfs sysfs ${lfs}/sys
	mount -f -t ramfs ramfs ${lfs}/dev
	mount -f -t tmpfs tmpfs ${lfs}/dev/shm
	mount -f -t devpts -o gid=4,mode=620 devpts ${lfs}/dev/pts

	ln -s /tools/bin/bash /mnt/lfs/bin
	ln -s bash /mnt/lfs/bin/sh

	# Build stage 2.
	chroot "$lfs" /tools/bin/env -i HOME=/root TERM="$TERM" \
		PATH="/usr/bin:/usr/sbin:/bin:/sbin:/tools/bin" \
		lfs_builddir="$lfs_builddir" \
		/tools/bin/pkgadd --config /tools/etc/prometheus.conf \
		--stage=2 stage2 ||
	error "${package}: could not build stage 2"

	echo "Stripping LFS system..."
	find ${lfs}/{,usr/}{bin,lib,sbin} -type f \
		-exec strip --strip-debug '{}' ';' >/dev/null 2>&1

	#FIXME: Cleaning up - kernel, bootloader, config...

	grep "${lfs}${srcdir}" /proc/mounts &> /dev/null && umount "${lfs}${srcdir}"
	grep "${lfs}/dev/shm" /proc/mounts &> /dev/null && umount "${lfs}/dev/shm"
	grep "${lfs}/dev/pts" /proc/mounts &> /dev/null && umount "${lfs}/dev/pts"
	grep "${lfs}/dev"  /proc/mounts &> /dev/null && umount "${lfs}/dev"
	grep "${lfs}/sys"  /proc/mounts &> /dev/null && umount "${lfs}/sys"
	grep "${lfs}/proc" /proc/mounts &> /dev/null && umount "${lfs}/proc"
	
	return 0
}
